Lambda calculus  also written as λ calculus  is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution  First formulated by Alonzo Church to formalize the concept of effective computability  lambda calculus found early successes in the area of computability theory  such as a negative answer to Hilbert s Entscheidungsproblem  Lambda calculus is a conceptually simple universal model of computation  Turing showed in 1937 that Turing machines equated the lambda calculus in expressiveness   The name derives from the Greek letter lambda  λ  used to denote binding a variable in a function  The letter itself is arbitrary and has no special meaning  Lambda calculus is taught and used in computer science because of its usefulness   Because of the importance of the notion of variable binding and substitution  there is not just one system of lambda calculus  and in particular there are typed and untyped variants  Historically  the most important system was the untyped lambda calculus  in which function application has no restrictions  so the notion of the domain of a function is not built into the system   In the Church舑Turing Thesis  the untyped lambda calculus is claimed to be capable of computing all effectively calculable functions  The typed lambda calculus is a variety that restricts function application  so that functions can only be applied if they are capable of accepting the given input s  type  of data   Today  the lambda calculus has applications in many different areas in mathematics  philosophy  linguistics  and computer science  It is still used in the area of computability theory  although Turing machines are also an important model for computation  Lambda calculus has played an important role in the development of the theory of programming languages  Counterparts to lambda calculus in computer science are functional programming languages  which essentially implement the lambda calculus  augmented with some constants and datatypes   Beyond programming languages  the lambda calculus also has many applications in proof theory  A major example of this is the Curry&ndash Howard correspondence  which gives a correspondence between different systems of typed lambda calculus and systems of formal logic   1  Lambda calculus in history of mathematics  The lambda calculus was introduced by mathematician Alonzo Church in the 1930s as part of an investigation into the foundations of mathematics  The original system was shown to be logically inconsistent in 1935 when Stephen Kleene and J  B  Rosser developed the Kleene&ndash Rosser paradox   Subsequently  in 1936 Church isolated and published just the portion relevant to computation  what is now called the untyped lambda calculus  In 1940  he also introduced a computationally weaker  but logically consistent system  known as the simply typed lambda calculus   2  Informal description  2 1  Motivation  Computable functions are a fundamental concept within computer science and mathematics  The λ calculus provides a simple semantics for computation  enabling properties of computation to be studied formally  The λ calculus incorporates two simplifications that make this semantics simple  The first simplification is that the λ calculus treats functions  anonymously   without giving them explicit names  For example  the function  can be rewritten in anonymous form as   read as  the pair of and is mapped to     Similarly   can be rewritten in anonymous form as   where the input is simply mapped to itself   The second simplification is that the λ calculus only uses functions of a single input  An ordinary function that requires two inputs  for instance the function  can be reworked into an equivalent function that accepts a single input  and as output returns another function  that in turn accepts a single input  For example   can be reworked into  This method  known as currying  transforms a function that takes multiple arguments into a chain of functions each with a single argument   Function application of the function to the arguments  5  2   yields at once  whereas evaluation of the curried version requires one more step  to arrive at the same result   2 2  The lambda calculus  The lambda calculus consists of a language of lambda terms  which is defined by a certain formal syntax  and a set of transformation rules  which allow manipulation of the lambda terms  These transformation rules can be viewed as an equational theory or as an operational definition   As described above  all functions in the lambda calculus are anonymous functions  having no names  They only accept one input variable  with currying used to implement functions with several variables   2 2 1  Lambda terms  The syntax of the lambda calculus defines some expressions as valid lambda calculus expression and some as invalid  just as some strings of characters are valid C programs and some are not  A valid lambda calculus expression is called a  lambda term    The following three rules give an inductive definition that can be applied to build all syntactically valid lambda terms   a variable    is itself a valid lambda term  if is a lambda term  and is a variable  then is a lambda term  called a lambda abstraction    if and are lambda terms  then is a lambda term  called an application   Nothing else is a lambda term  Thus a lambda term is valid if and only if it can be obtained by repeated application of these three rules  However  some parentheses can be omitted according to certain rules  For example  the outermost parentheses are usually not written   A lambda abstraction is a definition of an anonymous function that is capable of taking a single input and substituting it into the expression   It thus defines an anonymous function that takes x and returns t  For example is a lambda abstraction for the function using the term for t  The definition of a function with a lambda abstraction merely  sets up  the function but does not invoke it  The abstraction binds the variable in the term    An application represents the application of a function to an input   that is  it represents the act of calling function t on input s to produce    There is no concept in lambda calculus of variable declaration  In a definition such as  i e     the lambda calculus treats y as a variable that is not yet defined  The lambda abstraction is syntactically valid  and represents a function that adds its input to the yet unknown y   Bracketing may be used and may be needed to disambiguate terms  For example  and denote different terms  although coincidentally reduce to the same value    2 2 2  Functions that operate on functions  In lambda calculus  functions are taken to be  first class values   so functions may be used as the inputs  or be returned as outputs from other functions   For example  represents the identity function    and represents the identity function applied to   Further  represents the constant function   the function that always returns   no matter the input  In lambda calculus  function application is regarded as left associative  so that means    There are several notions of  equivalence  and  reduction  that allow lambda terms to be  reduced  to  equivalent  lambda terms   2 2 3  Alpha equivalence  A basic form of equivalence  definable on lambda terms  is alpha equivalence  It captures the intuition that the particular choice of a bound variable  in a lambda abstraction  does not  usually  matter  For instance  and are alpha equivalent lambda terms  and they both represent the same function  the identity function   The terms and are not alpha equivalent  because they are not bound in a lambda abstraction  In many presentations  it is usual to identify alpha equivalent lambda terms   The following definitions are necessary in order to be able to define beta reduction   2 2 4  Free variables  The free variables of a term are those variables not bound by a lambda abstraction  The set of free variables of an expression is defined inductively   The free variables of are just  The set of free variables of is the set of free variables of   but with removed  The set of free variables of are the union of the set of free variables of and the set of free variables of   For example  the lambda term representing the identity has no free variables  but the function has a single free variable     2 2 5  Capture avoiding substitutions  Suppose   and are lambda terms and and are variables  The notation indicates substitution of for in in a capture avoiding manner  This is defined so that      if          if and is not in the free variables of   The variable is said to be  fresh  for   For example    and    The freshness condition  requiring that is not in the free variables of   is crucial in order to ensure that substitution does not change the meaning of functions  For example  a substitution is made that ignores the freshness condition    This substitution turns the constant function into the identity by substitution   In general  failure to meet the freshness condition can be remedied by alpha renaming with a suitable fresh variable  For example  switching back to our correct notion of substitution  in the lambda abstraction can be renamed with a fresh variable   to obtain   and the meaning of the function is preserved by substitution   2 2 6  Beta reduction  The beta reduction rule states that an application of the form reduces to the term   The notation is used to indicate that beta reduces to   For example  for every     This demonstrates that really is the identity  Similarly    which demonstrates that is a constant function   The lambda calculus may be seen as an idealised functional programming language  like Haskell or Standard ML  Under this view  beta reduction corresponds to a computational step  This step can be repeated by additional beta conversions until there are no more applications left to reduce  In the untyped lambda calculus  as presented here  this reduction process may not terminate  For instance  consider the term   Here   That is  the term reduces to itself in a single beta reduction  and therefore the reduction process will never terminate   Another aspect of the untyped lambda calculus is that it does not distinguish between different kinds of data  For instance  it may be desirable to write a function that only operates on numbers  However  in the untyped lambda calculus  there is no way to prevent a function from being applied to truth values  strings  or other non number objects   3  Formal definition  3 1  Definition  Lambda expressions are composed of  variables v1  v2       vn       the abstraction symbols lambda  λ  and dot      parentheses     The set of lambda expressions  Λ  can be defined inductively   If x is a variable  then x ∈ Λ  If x is a variable and M ∈ Λ  then  λx M  ∈ Λ  If M  N ∈ Λ  then  M N  ∈ Λ Instances of rule 2 are known as abstractions and instances of rule 3 are known as applications   3 2  Notation  To keep the notation of lambda expressions uncluttered  the following conventions are usually applied   Outermost parentheses are dropped  M N instead of  M N   Applications are assumed to be left associative  M N P may be written instead of   M N  P   The body of an abstraction extends as far right as possible  λx M N means λx  M N  and not  λx M  N  A sequence of abstractions is contracted  λx λy λz N is abbreviated as λxyz N  3 3  Free and bound variables  The abstraction operator  λ  is said to bind its variable wherever it occurs in the body of the abstraction  Variables that fall within the scope of an abstraction are said to be bound  All other variables are called free  For example  in the following expression y is a bound variable and x is free  λy x x y  Also note that a variable is bound by its  nearest  abstraction  In the following example the single occurrence of x in the expression is bound by the second lambda  λx y  λx z x   The set of free variables of a lambda expression  M  is denoted as FV M  and is defined by recursion on the structure of the terms  as follows   FV x     x   where x is a variable  FV λx M    FV M  \  x   FV M N    FV M  ∪ FV N  An expression that contains no free variables is said to be closed  Closed lambda expressions are also known as combinators and are equivalent to terms in combinatory logic   4  Reduction  The meaning of lambda expressions is defined by how expressions can be reduced   There are three kinds of reduction   α conversion  changing bound variables  alpha    β reduction  applying functions to their arguments  beta    η conversion  which captures a notion of extensionality  eta   We also speak of the resulting equivalences  two expressions are β equivalent  if they can be β converted into the same expression  and α η equivalence are defined similarly   The term redex  short for reducible expression  refers to subterms that can be reduced by one of the reduction rules  For example   λx M  N is a beta redex in expressing the substitution of N for x in M  if x is not free in M  λx M x is an eta redex  The expression to which a redex reduces is called its reduct  using the previous example  the reducts of these expressions are respectively M x  N  and M   4 1  α conversion  Alpha conversion  sometimes known as alpha renaming  allows bound variable names to be changed  For example  alpha conversion of λx x might yield λy y  Terms that differ only by alpha conversion are called α equivalent  Frequently in uses of lambda calculus  α equivalent terms are considered to be equivalent   The precise rules for alpha conversion are not completely trivial  First  when alpha converting an abstraction  the only variable occurrences that are renamed are those that are bound to the same abstraction  For example  an alpha conversion of λx λx x could result in λy λx x  but it could not result in λy λx y  The latter has a different meaning from the original   Second  alpha conversion is not possible if it would result in a variable getting captured by a different abstraction  For example  if we replace x with y in λx λy x  we get λy λy y  which is not at all the same   In programming languages with static scope  alpha conversion can be used to make name resolution simpler by ensuring that no variable name masks a name in a containing scope  see alpha renaming to make name resolution trivial    4 1 1  Substitution  Substitution  written E V    R   is the process of replacing all free occurrences of the variable V in the expression E with expression R  Substitution on terms of the λ calculus is defined by recursion on the structure of terms  as follows  note  x and y are only variables while M and N are any λ expression    To substitute into a lambda abstraction  it is sometimes necessary to α convert the expression  For example  it is not correct for  λx y  y    x  to result in  λx x   because the substituted x was supposed to be free but ended up being bound  The correct substitution in this case is  λz x   up to α equivalence  Notice that substitution is defined uniquely up to α equivalence   4 2  ॆ reduction  Beta reduction captures the idea of function application  Beta reduction is defined in terms of substitution  the beta reduction of    λV E  E艂   is E V    E艂    For example  assuming some encoding of 2  7  ȕ  we have the following β reduction    λn nȕ2  7  → 7ȕ2   4 3  ॑ conversion  Eta conversion expresses the idea of extensionality  which in this context is that two functions are the same if and only if they give the same result for all arguments  Eta conversion converts between λx  f x  and f whenever x does not appear free in f   5  Normal forms and confluence  For the untyped lambda calculus  β reduction as a rewriting rule is neither strongly normalising nor weakly normalising   However  it can be shown that β reduction is confluent   Of course  we are working up to α conversion  i e  we consider two normal forms to be equal  if it is possible to α convert one into the other    Therefore  both strongly normalising terms and weakly normalising terms have a unique normal form  For strongly normalising terms  any reduction strategy is guaranteed to yield the normal form  whereas for weakly normalising terms  some reduction strategies may fail to find it   6  Encoding datatypes  The basic lambda calculus may be used to model booleans  arithmetic  data structures and recursion  as illustrated in the following sub sections   6 1  Arithmetic in lambda calculus  There are several possible ways to define the natural numbers in lambda calculus  but by far the most common are the Church numerals  which can be defined as follows   and so on  Or using the alternative syntax presented above in Notation   A Church numeral is a higher order function—it takes a single argument function f  and returns another single argument function  The Church numeral n is a function that takes a function f as argument and returns the n th composition of f  i e  the function f composed with itself n times  This is denoted f n  and is in fact the n th power of f  considered as an operator   f 0  is defined to be the identity function  Such repeated compositions  of a single function f  obey the laws of exponents  which is why these numerals can be used for arithmetic   In Church s original lambda calculus  the formal parameter of a lambda expression was required to occur at least once in the function body  which made the above definition of 0 impossible    We can define a successor function  which takes a number n and returns n + 1 by adding another application of f where   mf x  means the function  f  is applied  m  times on  x    Because the m th composition of f composed with the n th composition of f gives the m+n th composition of f  addition can be defined as follows   PLUS can be thought of as a function taking two natural numbers as arguments and returning a natural number  it can be verified that  and  are β equivalent lambda expressions  Since adding m to a number n can be accomplished by adding 1 m times  an equivalent definition is   Similarly  multiplication can be defined as  Alternatively  since multiplying m and n is the same as repeating the add n function m times and then applying it to zero  Exponentiation has a rather simple rendering in Church numerals  namely  The predecessor function defined by PRED n   n − 1 for a positive integer n and PRED 0   0 is considerably more difficult  The formula  can be validated by showing inductively that if T denotes  λg λh h  g f    then T n  λu x     λh h f n−1  x    for n   0  Two other definitions of PRED are given below  one using conditionals and the other using pairs  With the predecessor function  subtraction is straightforward  Defining  SUB m n yields m − n when m   n and 0 otherwise   6 2  Logic and predicates  By convention  the following two definitions  known as Church booleans  are used for the boolean values TRUE and FALSE   Then  with these two λ terms  we can define some logic operators  these are just possible formulations  other expressions are equally correct    We are now able to compute some logic functions  for example   and we see that AND TRUE FALSE is equivalent to FALSE   A predicate is a function that returns a boolean value  The most fundamental predicate is ISZERO  which returns TRUE if its argument is the Church numeral 0  and FALSE if its argument is any other Church numeral   The following predicate tests whether the first argument is less than or equal to the second   and since m   n  if LEQ m n and LEQ n m  it is straightforward to build a predicate for numerical equality   The availability of predicates and the above definition of TRUE and FALSE make it convenient to write  if then else  expressions in lambda calculus  For example  the predecessor function can be defined as   which can be verified by showing inductively that n  λg λk ISZERO  g 1  k  PLUS  g k  1    λv 0  is the add n − 1 function for n   0   6 3  Pairs  A pair  2 tuple  can be defined in terms of TRUE and FALSE  by using the Church encoding for pairs  For example  PAIR encapsulates the pair  x y   FIRST returns the first element of the pair  and SECOND returns the second   A linked list can be defined as either NIL for the empty list  or the PAIR of an element and a smaller list  The predicate NULL tests for the value NIL   Alternatively  with NIL    FALSE  the construct l  λh λt λz deal with head h and tail t   deal with nil  obviates the need for an explicit NULL test    As an example of the use of pairs  the shift and increment function that maps  m  n  to  n  n + 1  can be defined as  which allows us to give perhaps the most transparent version of the predecessor function   6 4  Recursion and fixed points  Recursion is the definition of a function using the function itself  on the face of it  lambda calculus does not allow this  we can t refer to a value which is yet to be defined  inside the lambda term defining that same value  as all functions are anonymous in lambda calculus   However  this impression is misleading  in膔  λx x x  y 膔both x‍舁‍ s refer to the same lambda term  y  so it is possible for a lambda expression 舑 here y 舑 to be arranged to receive itself as its argument value  through self application   Consider for instance the factorial function F n  recursively defined by  In the lambda expression which is to represent this function  a parameter  typically the first one  will be assumed to receive the lambda expression itself as its value  so that calling it 舑 applying it to an argument 舑 will amount to recursion  Thus to achieve recursion  the intended as self referencing argument  called r here  must always be passed to itself within the function body  at a call point   The self application achieves replication here  passing the function s lambda expression on to the next invocation as an argument value  making it available to be referenced and called there   This solves it but requires re writing each recursive call as self application  We would like to have a generic solution  without a need for any re writes   Given a lambda term with first argument representing recursive call  e g  G here   the fixed point combinator FIX will return a self replicating lambda expression representing the recursive function  here  F   The function does not need to be explicitly passed to itself at any point  for the self replication is arranged in advance  when it is created  to be done each time it is called  Thus the original lambda expression  FIX G  is re created inside itself  at call point  achieving self reference   In fact  there are many possible definitions for this FIX operator  the simplest of them being   In the lambda calculus  Y g舁 is a fixed point of g  as it expands to   Now  to perform our recursive call to the factorial function  we would simply call  Y G  n   where n is the number we are calculating the factorial of  Given n   4  for example  this gives   Every recursively defined function can be seen as a fixed point of some suitably defined function closing over the recursive call with an extra argument  and therefore  using Y  every recursively defined function can be expressed as a lambda expression  In particular  we can now cleanly define the subtraction  multiplication and comparison predicate of natural numbers recursively   6 5  Standard terms  Certain terms have commonly accepted names   7  Simpler way to write all possible lambdas  This form is more self referencing since no external logic is needed to name variables which are instead countable and renamable as unary number like in Church encoding  If lambda functions are really anonymous  their variable names must not affect the logic  A simple normalized form is unary counting by where  1111     first occurs  starting with      8  Typed lambda calculi  A typed lambda calculus is a typed formalism that uses the lambda symbol    to denote anonymous function abstraction  In this context  types are usually objects of a syntactic nature that are assigned to lambda terms  the exact nature of a type depends on the calculus considered  see kinds below   From a certain point of view  typed lambda calculi can be seen as refinements of the untyped lambda calculus but from another point of view  they can also be considered the more fundamental theory and untyped lambda calculus a special case with only one type   Typed lambda calculi are foundational programming languages and are the base of typed functional programming languages such as ML and Haskell and  more indirectly  typed imperative programming languages  Typed lambda calculi play an important role in the design of type systems for programming languages  here typability usually captures desirable properties of the program  e g  the program will not cause a memory access violation   Typed lambda calculi are closely related to mathematical logic and proof theory via the Curry&ndash Howard isomorphism and they can be considered as the internal language of classes of categories  e g  the simply typed lambda calculus is the language of Cartesian closed categories  CCCs    9  Computable functions and lambda calculus  A function F  N → N of natural numbers is a computable function if and only if there exists a lambda expression f such that for every pair of x  y in N  F x  y if and only if f x  β y   where x and y are the Church numerals corresponding to x and y  respectively and  β meaning equivalence with beta reduction  This is one of the many ways to define computability  see the Church Turing thesis for a discussion of other approaches and their equivalence   10  Undecidability of equivalence  There is no algorithm that takes as input two lambda expressions and outputs TRUE or FALSE depending on whether or not the two expressions are equivalent  This was historically the first problem for which undecidability could be proven  As is common for a proof of undecidability  the proof shows that no computable function can decide the equivalence  Church s thesis is then invoked to show that no algorithm can do so   Church s proof first reduces the problem to determining whether a given lambda expression has a normal form  A normal form is an equivalent expression that cannot be reduced any further under the rules imposed by the form  Then he assumes that this predicate is computable  and can hence be expressed in lambda calculus  Building on earlier work by Kleene and constructing a Gödel numbering for lambda expressions  he constructs a lambda expression e that closely follows the proof of Gödel s first incompleteness theorem  If e is applied to its own Gödel number  a contradiction results   11  Lambda calculus and programming languages  As pointed out by Peter Landin s 1965 paper   sequential procedural programming languages can be understood in terms of the lambda calculus  which provides the basic mechanisms for procedural abstraction and procedure  subprogram  application   Lambda calculus reifies  functions  and makes them first class objects  which raises implementation complexity when it is implemented   11 1  Anonymous functions  For example in Lisp the  square  function can be expressed as a lambda expression as follows    lambda  x   * x x    The above example is an expression that evaluates to a first class function  The symbol lambda creates an anonymous function  given a list of parameter names   x  舒 just a single argument in this case  and an expression that is evaluated as the body of the function   * x x   The Haskell example is identical  Anonymous functions are sometimes called lambda expressions   For example Pascal and many other imperative languages have long supported passing subprograms as arguments to other subprograms through the mechanism of function pointers  However  function pointers are not a sufficient condition for functions to be first class datatypes  because a function is a first class datatype if and only if new instances of the function can be created at run time  And this run time creation of functions is supported in Smalltalk  Javascript  and more recently in Scala  Eiffel   agents    C#   delegates   and C++11  among others   11 2  Reduction strategies  Whether a term is normalising or not  and how much work needs to be done in normalising it if it is  depends to a large extent on the reduction strategy used  The distinction between reduction strategies relates to the distinction in functional programming languages between eager evaluation and lazy evaluation    Full beta reductions  Any redex can be reduced at any time  This means essentially the lack of any particular reduction strategy—with regard to reducibility   all bets are off    Applicative order  The leftmost  innermost redex is always reduced first  Intuitively this means a function s arguments are always reduced before the function itself  Applicative order always attempts to apply functions to normal forms  even when this is not possible   Applicative order is not a normalising strategy  The usual counterexample is as follows  define Ω   ωω where ω   λx xx  This entire expression contains only one redex  namely the whole expression  its reduct is again Ω  Since this is the only available reduction  Ω has no normal form  under any evaluation strategy   Using applicative order  the expression KIΩ    λx λy x   λx x Ω is reduced by first reducing Ω to normal form  since it is the rightmost redex   but since Ω has no normal form  applicative order fails to find a normal form for KIΩ   In contrast  normal order is so called because it always finds a normalising reduction  if one exists  In the above example  KIΩ reduces under normal order to I  a normal form  A drawback is that redexes in the arguments may be copied  resulting in duplicated computation  for example   λx xx    λx x y  reduces to   λx x y    λx x y  using this strategy  now there are two redexes  so full evaluation needs two more steps  but if the argument had been reduced first  there would now be none    The positive tradeoff of using applicative order is that it does not cause unnecessary computation  if all arguments are used  because it never substitutes arguments containing redexes and hence never needs to copy them  which would duplicate work   In the above example  in applicative order  λx xx    λx x y  reduces first to  λx xx y and then to the normal order yy  taking two steps instead of three   Most purely functional programming languages  notably Miranda and its descendents  including Haskell   and the proof languages of theorem provers  use lazy evaluation  which is essentially the same as call by need  This is like normal order reduction  but call by need manages to avoid the duplication of work inherent in normal order reduction using sharing  In the example given above   λx xx    λx x y  reduces to   λx x y    λx x y   which has two redexes  but in call by need they are represented using the same object rather than copied  so when one is reduced the other is too   11 3  A note about complexity  While the idea of beta reduction seems simple enough  it is not an atomic step  in that it must have a non trivial cost when estimating computational complexity  To be precise  one must somehow find the location of all of the occurrences of the bound variable V in the expression E  implying a time cost  or one must keep track of these locations in some way  implying a space cost  A naïve search for the locations of V in E is O n  in the length n of E  This has led to the study of systems that use explicit substitution  Sinot s director strings offer a way of tracking the locations of free variables in expressions   11 4  Parallelism and concurrency  The Church–Rosser property of the lambda calculus means that evaluation  β reduction  can be carried out in any order  even in parallel  This means that various nondeterministic evaluation strategies are relevant  However  the lambda calculus does not offer any explicit constructs for parallelism  One can add constructs such as Futures to the lambda calculus  Other process calculi have been developed for describing communication and concurrency   12  Semantics  The fact that lambda calculus terms act as functions on other lambda calculus terms  and even on themselves  led to questions about the semantics of the lambda calculus  Could a sensible meaning be assigned to lambda calculus terms  The natural semantics was to find a set D isomorphic to the function space D → D  of functions on itself  However  no nontrivial such D can exist  by cardinality constraints because the set of all functions from D to D has greater cardinality than D  unless D is a singleton set   In the 1970s  Dana Scott showed that  if only continuous functions were considered  a set or domain D with the required property could be found  thus providing a model for the lambda calculus   This work also formed the basis for the denotational semantics of programming languages   13  See also  Applicative computing systems – Treatment of objects in the style of the lambda calculus  Binary lambda calculus – A version of lambda calculus with binary I O  a binary encoding of terms  and a designated universal machine   Calculus of constructions – A typed lambda calculus with types as first class values  Cartesian closed category – A setting for lambda calculus in category theory  Categorical abstract machine – A model of computation applicable to lambda calculus  Combinatory logic – A notation for mathematical logic without variables  Curry&ndash Howard isomorphism – The formal correspondence between programs and proofs  Deductive lambda calculus – The consideration of the problems associated with considering lambda calculus as a Deductive system   Domain theory – Study of certain posets giving denotational semantics for lambda calculus  Evaluation strategy – Rules for the evaluation of expressions in programming languages  Explicit substitution – The theory of substitution  as used in β reduction  Harrop formula – A kind of constructive logical formula such that proofs are lambda terms  Kappa calculus – A first order analogue of lambda calculus  Kleene&ndash Rosser paradox – A demonstration that some form of lambda calculus is inconsistent  Knights of the Lambda Calculus – A semi fictional organization of LISP and Scheme hackers  Lambda calculus definition   Formal definition of the lambda calculus   Lambda cube – A framework for some extensions of typed lambda calculus  Lambda mu calculus – An extension of the lambda calculus for treating classical logic  Let expression – An expression close related to a lambda abstraction   Rewriting – Transformation of formulæ in formal systems  SECD machine – A virtual machine designed for the lambda calculus  Simply typed lambda calculus   Version s  with a single type constructor  SKI combinator calculus – A computational system based on the S  K and I combinators  System F – A typed lambda calculus with type variables  Typed lambda calculus – Lambda calculus with typed variables  and functions   Universal Turing machine – A formal computing machine that is equivalent to lambda calculus  Unlambda – An esoteric functional programming language based on combinatory logic  14  Further reading  Abelson  Harold & Gerald Jay Sussman  Structure and Interpretation of Computer Programs  The MIT Press  ISBN 0 262 51087 1   Hendrik Pieter Barendregt  ftp   ftp cs ru nl pub CompMath Found lambda pdf Introduction to Lambda Calculus    Henk Barendregt    The Bulletin of Symbolic Logic  Volume 3  Number 2  June 1997   Barendregt  Hendrik Pieter  The Type Free Lambda Calculus pp1091–1132 of Handbook of Mathematical Logic  North Holland  1977  ISBN 0 7204 2285 X  Cardone and Hindley  2006    In Gabbay and Woods  eds    Handbook of the History of Logic  vol  5  Elsevier   Church  Alonzo  An unsolvable problem of elementary number theory  American Journal of Mathematics  58  1936   pp  345舑363  This paper contains the proof that the equivalence of lambda expressions is in general not decidable   Alonzo Church  The Calculi of Lambda Conversion  ISBN 978 0 691 08394 0   Kleene  Stephen  A theory of positive integers in formal logic  American Journal of Mathematics  57  1935   pp  153舑173 and 219舑244  Contains the lambda calculus definitions of several familiar functions   Landin  Peter  A Correspondence Between ALGOL 60 and Church s Lambda Notation  Communications of the ACM  vol  8  no  2  1965   pages 89–101  Available from the   A classic paper highlighting the importance of lambda calculus as a basis for programming languages   Larson  Jim    A gentle introduction for programmers   Schalk  A  and Simmons  H   2005    Notes for a course in the Mathematical Logic MSc at Manchester University   de Queiroz  Ruy J G B   2008    Studia Logica  90 2  211 247  A paper giving a formal underpinning to the idea of  meaning is use  which  even if based on proofs  it is different from proof theoretic semantics as in the Dummett–Prawitz tradition since it takes reduction as the rules giving meaning  Monographs textbooks for graduate students   Morten Heine Sørensen  Paweł Urzyczyn  Lectures on the Curry Howard isomorphism  Elsevier  2006  ISBN 0 444 52077 5 is a recent monograph that covers the main topics of lambda calculus from the type free variety  to most typed lambda calculi  including more recent developments like pure type systems and the lambda cube  It does not cover subtyping extensions   covers lambda calculi from a practical type system perspective  some topics like dependent types are only mentioned  but subtyping is an important topic  Some parts of this article are based on material from FOLDOC  used with permission   15  External links  Achim Jung    PDF   Dana Scott    PDF   David C  Keenan   Raúl Rojas    PDF   Peter Selinger    PDF   L  Allison   Georg P  Loczewski   Bret Victor   on  a simple yet powerful pure calculus interpreter  Mike Thyer    a graphical Java applet demonstrating alternative reduction strategies     by Jim Larson  using C++ Templates  Marius Buliga   by Peter Kelly  Paul Coddington  and Andrew Wendelborn  mentions graph reduction as a common means of evaluating lambda expressions and discusses the applicability of lambda calculus for distributed computing  due to the Church–Rosser property  which enables parallel graph reduction for lambda expressions    Shane Steinert Threlkeld    Internet Encyclopedia of Philosophy  16  References